{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "bootstrap(uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_tokens(pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_in_to_asset(uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_nft(asset,pay,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "manager_address": {
                    "type": "bytes",
                    "key": "manager_address"
                },
                "total_burned": {
                    "type": "uint64",
                    "key": "total_burned"
                },
                "xnft_asset_id": {
                    "type": "uint64",
                    "key": "xnft_asset_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BurnApp",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "xnft_asset_id"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw_tokens",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in_to_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "burn_nft",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    },
                    {
                        "type": "axfer",
                        "name": "axfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}