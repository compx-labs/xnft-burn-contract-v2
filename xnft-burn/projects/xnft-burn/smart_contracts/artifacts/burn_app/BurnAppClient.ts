/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BurnApp","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"bootstrap","args":[{"type":"uint64","name":"xnft_asset_id"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdraw_tokens","args":[{"type":"pay","name":"mbrTxn"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"asset_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"uint64","name":"asset"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"burn_nft","args":[{"type":"asset","name":"asset"},{"type":"pay","name":"mbrTxn"},{"type":"axfer","name":"axfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager_address":{"keyType":"AVMString","valueType":"address","key":"bWFuYWdlcl9hZGRyZXNz"},"total_burned":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfYnVybmVk"},"xnft_asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"eG5mdF9hc3NldF9pZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[386],"errorMessage":"Insufficient balance in xnft for burn payment"},{"pc":[375],"errorMessage":"Insufficient fee for NFT burn"},{"pc":[330],"errorMessage":"Insufficient fee for asset opt-in"},{"pc":[296],"errorMessage":"Insufficient fee for fund withdrawal"},{"pc":[260],"errorMessage":"Invalid xnft asset ID"},{"pc":[360],"errorMessage":"NFT must be burned with exactly 1 unit"},{"pc":[368],"errorMessage":"NFT must be sent to the application address"},{"pc":[108,147,173,203,229],"errorMessage":"OnCompletion is not NoOp"},{"pc":[257],"errorMessage":"Only the manager can bootstrap the application"},{"pc":[289],"errorMessage":"Only the manager can withdraw funds"},{"pc":[281],"errorMessage":"Withdrawal amount must be greater than zero"},{"pc":[382],"errorMessage":"account opted into asset"},{"pc":[233],"errorMessage":"can only call when creating"},{"pc":[111,150,176,206],"errorMessage":"can only call when not creating"},{"pc":[255,287,391,412],"errorMessage":"check GlobalState exists"},{"pc":[138],"errorMessage":"transaction type is axfer"},{"pc":[128,164,186,220],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAFAQDoBwSgwh4mAwx0b3RhbF9idXJuZWQPbWFuYWdlcl9hZGRyZXNzDXhuZnRfYXNzZXRfaWQxG0EAKoIFBLhEezYE30Py8wQ3YvbIBPg0x1wE7lDQfDYaAI4FAHsAYQBDACkAAiNDMRkURDEYRDYaARfAMDEWgQIJSTgQIhJEMRYiCUk4ECUSRIgA0SJDMRkURDEYRDYaARcxFiIJSTgQIhJEiACWIkMxGRREMRhEMRYiCUk4ECISRDYaARc2GgIXiABOIkMxGRREMRhENhoBFzEWIglJOBAiEkSIABciQzEZFEQxGBREiAACIkMpMQBnKCNniYoCADEAIyllRBJEi/5EKov+ZygjZ4v+i/+IACuJigMAi/5EMQAjKWVEEkSL/TgIJA9EsTEAi/+yEYv+shKyFCWyECSyAbOJigIAi/84CIGIlQYPRLEyCrIUI7ISi/6yESWyECSyAbOJigMAi/84EiISRIv/OBQyChJEi/44CCQPRDIKi/1wAEQhBA9EsSMqZUQxALIUIQSyErIRJbIQJLIBsyMoZUQiCChMZ4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BurnApp contract
 */
export type BurnAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64,pay)void': {
      xnftAssetId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'withdraw_tokens(pay,uint64,uint64)void': {
      mbrTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      assetId: bigint | number
    }
    'opt_in_to_asset(uint64,pay)void': {
      asset: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'burn_nft(asset,pay,axfer)void': {
      asset: bigint
      mbrTxn: AppMethodCallTransactionArgument
      axfer: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64,pay)void': [xnftAssetId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'withdraw_tokens(pay,uint64,uint64)void': [mbrTxn: AppMethodCallTransactionArgument, amount: bigint | number, assetId: bigint | number]
    'opt_in_to_asset(uint64,pay)void': [asset: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'burn_nft(asset,pay,axfer)void': [asset: bigint, mbrTxn: AppMethodCallTransactionArgument, axfer: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type BurnAppReturns = {
  'createApplication()void': void
  'bootstrap(uint64,pay)void': void
  'withdraw_tokens(pay,uint64,uint64)void': void
  'opt_in_to_asset(uint64,pay)void': void
  'burn_nft(asset,pay,axfer)void': void
}

/**
 * Defines the types of available calls and state of the BurnApp smart contract.
 */
export type BurnAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BurnAppArgs['obj']['createApplication()void']
      argsTuple: BurnAppArgs['tuple']['createApplication()void']
      returns: BurnAppReturns['createApplication()void']
    }>
    & Record<'bootstrap(uint64,pay)void' | 'bootstrap', {
      argsObj: BurnAppArgs['obj']['bootstrap(uint64,pay)void']
      argsTuple: BurnAppArgs['tuple']['bootstrap(uint64,pay)void']
      returns: BurnAppReturns['bootstrap(uint64,pay)void']
    }>
    & Record<'withdraw_tokens(pay,uint64,uint64)void' | 'withdraw_tokens', {
      argsObj: BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void']
      argsTuple: BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']
      returns: BurnAppReturns['withdraw_tokens(pay,uint64,uint64)void']
    }>
    & Record<'opt_in_to_asset(uint64,pay)void' | 'opt_in_to_asset', {
      argsObj: BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void']
      argsTuple: BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']
      returns: BurnAppReturns['opt_in_to_asset(uint64,pay)void']
    }>
    & Record<'burn_nft(asset,pay,axfer)void' | 'burn_nft', {
      argsObj: BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void']
      argsTuple: BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']
      returns: BurnAppReturns['burn_nft(asset,pay,axfer)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: string
        totalBurned: bigint
        xnftAssetId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BurnAppSignatures = keyof BurnAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BurnAppNonVoidMethodSignatures = keyof BurnAppTypes['methods'] extends infer T ? T extends keyof BurnAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BurnApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BurnAppSignatures> = BurnAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BurnApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BurnAppSignatures> = BurnAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BurnAppTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BurnAppCreateCallParams =
  | Expand<CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BurnAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BurnAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BurnApp smart contract
 */
export abstract class BurnAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BurnAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BurnAppParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BurnApp smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xnftAssetId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the withdraw_tokens(pay,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawTokens(params: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_tokens(pay,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.amount, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the burn_nft(asset,pay,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnNft(params: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burn_nft(asset,pay,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.mbrTxn, params.args.axfer],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BurnApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BurnAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BurnAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BurnAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BurnAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BurnApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BurnAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BurnAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BurnAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BurnAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BurnApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BurnAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BurnApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BurnAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BurnApp smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BurnAppArgs['obj']['createApplication()void'] | BurnAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BurnAppParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BurnAppReturns['createApplication()void']) }, appClient: new BurnAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BurnApp smart contract
 */
export class BurnAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BurnAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BurnApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BurnAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BurnAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BurnAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BurnAppClient> {
    return new BurnAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BurnAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BurnAppClient> {
    return new BurnAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BurnApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BurnApp smart contract using the `bootstrap(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BurnAppParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `withdraw_tokens(pay,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawTokens: (params: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BurnAppParamsFactory.withdrawTokens(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `opt_in_to_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BurnAppParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `burn_nft(asset,pay,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnNft: (params: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BurnAppParamsFactory.burnNft(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BurnApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BurnApp smart contract using the `bootstrap(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BurnAppParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `withdraw_tokens(pay,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawTokens: (params: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BurnAppParamsFactory.withdrawTokens(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `opt_in_to_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BurnAppParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the BurnApp smart contract using the `burn_nft(asset,pay,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnNft: (params: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BurnAppParamsFactory.burnNft(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BurnApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BurnApp smart contract using the `bootstrap(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BurnAppParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BurnAppReturns['bootstrap(uint64,pay)void'])}
    },

    /**
     * Makes a call to the BurnApp smart contract using the `withdraw_tokens(pay,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawTokens: async (params: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BurnAppParamsFactory.withdrawTokens(params))
      return {...result, return: result.return as unknown as (undefined | BurnAppReturns['withdraw_tokens(pay,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BurnApp smart contract using the `opt_in_to_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BurnAppParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | BurnAppReturns['opt_in_to_asset(uint64,pay)void'])}
    },

    /**
     * Makes a call to the BurnApp smart contract using the `burn_nft(asset,pay,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnNft: async (params: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BurnAppParamsFactory.burnNft(params))
      return {...result, return: result.return as unknown as (undefined | BurnAppReturns['burn_nft(asset,pay,axfer)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BurnAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BurnApp app
   */
  state = {
    /**
     * Methods to access global state for the current BurnApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: result.manager_address,
          totalBurned: result.total_burned,
          xnftAssetId: result.xnft_asset_id,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager_address")) as string | undefined },
      /**
       * Get the current value of the total_burned key in global state
       */
      totalBurned: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_burned")) as bigint | undefined },
      /**
       * Get the current value of the xnft_asset_id key in global state
       */
      xnftAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("xnft_asset_id")) as bigint | undefined },
    },
  }

  public newGroup(): BurnAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64,pay)void method call against the BurnApp contract
       */
      bootstrap(params: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_tokens(pay,uint64,uint64)void method call against the BurnApp contract
       */
      withdrawTokens(params: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawTokens(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(uint64,pay)void method call against the BurnApp contract
       */
      optInToAsset(params: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burn_nft(asset,pay,axfer)void method call against the BurnApp contract
       */
      burnNft(params: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnNft(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BurnApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BurnAppComposer
  }
}
export type BurnAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BurnAppArgs['obj']['bootstrap(uint64,pay)void'] | BurnAppArgs['tuple']['bootstrap(uint64,pay)void']>): BurnAppComposer<[...TReturns, BurnAppReturns['bootstrap(uint64,pay)void'] | undefined]>

  /**
   * Calls the withdraw_tokens(pay,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawTokens(params?: CallParams<BurnAppArgs['obj']['withdraw_tokens(pay,uint64,uint64)void'] | BurnAppArgs['tuple']['withdraw_tokens(pay,uint64,uint64)void']>): BurnAppComposer<[...TReturns, BurnAppReturns['withdraw_tokens(pay,uint64,uint64)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<BurnAppArgs['obj']['opt_in_to_asset(uint64,pay)void'] | BurnAppArgs['tuple']['opt_in_to_asset(uint64,pay)void']>): BurnAppComposer<[...TReturns, BurnAppReturns['opt_in_to_asset(uint64,pay)void'] | undefined]>

  /**
   * Calls the burn_nft(asset,pay,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnNft(params?: CallParams<BurnAppArgs['obj']['burn_nft(asset,pay,axfer)void'] | BurnAppArgs['tuple']['burn_nft(asset,pay,axfer)void']>): BurnAppComposer<[...TReturns, BurnAppReturns['burn_nft(asset,pay,axfer)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BurnApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BurnAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BurnAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BurnAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BurnAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BurnAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BurnAppComposerResults<TReturns>>
}
export type BurnAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

