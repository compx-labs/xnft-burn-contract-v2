#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 1000 4 500000
    bytecblock "total_burned" "manager_address" "xnft_asset_id"
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    txn NumAppArgs
    bz main_after_if_else@11
    pushbytess 0xb8447b36 0xdf43f2f3 0x3762f6c8 0xf834c75c 0xee50d07c // method "createApplication()void", method "bootstrap(uint64,pay)void", method "withdraw_tokens(pay,uint64,uint64)void", method "opt_in_to_asset(uint64,pay)void", method "burn_nft(asset,pay,axfer)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_bootstrap_route@4 main_withdraw_tokens_route@5 main_opt_in_to_asset_route@6 main_burn_nft_route@7

main_after_if_else@11:
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    intc_1 // 0
    return

main_burn_nft_route@7:
    // smart_contracts/burn_app/burner.algo.ts:53
    // burn_nft(asset: Asset, mbrTxn: gtxn.PaymentTxn, axfer: gtxn.AssetTransferTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/burn_app/burner.algo.ts:53
    // burn_nft(asset: Asset, mbrTxn: gtxn.PaymentTxn, axfer: gtxn.AssetTransferTxn) {
    callsub burn_nft
    intc_0 // 1
    return

main_opt_in_to_asset_route@6:
    // smart_contracts/burn_app/burner.algo.ts:40
    // opt_in_to_asset(asset: uint64, mbrTxn: gtxn.PaymentTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/burn_app/burner.algo.ts:40
    // opt_in_to_asset(asset: uint64, mbrTxn: gtxn.PaymentTxn) {
    callsub opt_in_to_asset
    intc_0 // 1
    return

main_withdraw_tokens_route@5:
    // smart_contracts/burn_app/burner.algo.ts:26
    // withdraw_tokens(mbrTxn: gtxn.PaymentTxn, amount: uint64, asset_id: uint64) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/burn_app/burner.algo.ts:26
    // withdraw_tokens(mbrTxn: gtxn.PaymentTxn, amount: uint64, asset_id: uint64) {
    callsub withdraw_tokens
    intc_0 // 1
    return

main_bootstrap_route@4:
    // smart_contracts/burn_app/burner.algo.ts:18
    // bootstrap(xnft_asset_id: uint64, mbrTxn: gtxn.PaymentTxn) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/burn_app/burner.algo.ts:8
    // export class BurnApp extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/burn_app/burner.algo.ts:18
    // bootstrap(xnft_asset_id: uint64, mbrTxn: gtxn.PaymentTxn) {
    callsub bootstrap
    intc_0 // 1
    return

main_createApplication_route@3:
    // smart_contracts/burn_app/burner.algo.ts:13
    // createApplication() {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub createApplication
    intc_0 // 1
    return


// smart_contracts/burn_app/burner.algo.ts::BurnApp.createApplication() -> void:
createApplication:
    // smart_contracts/burn_app/burner.algo.ts:9
    // manager_address = GlobalState<Account>();
    bytec_1 // "manager_address"
    // smart_contracts/burn_app/burner.algo.ts:14
    // this.manager_address.value = Txn.sender;
    txn Sender
    app_global_put
    // smart_contracts/burn_app/burner.algo.ts:10
    // total_burned = GlobalState<uint64>();
    bytec_0 // "total_burned"
    // smart_contracts/burn_app/burner.algo.ts:15
    // this.total_burned.value = 0;
    intc_1 // 0
    app_global_put
    retsub


// smart_contracts/burn_app/burner.algo.ts::BurnApp.bootstrap(xnft_asset_id: uint64, mbrTxn: uint64) -> void:
bootstrap:
    // smart_contracts/burn_app/burner.algo.ts:18
    // bootstrap(xnft_asset_id: uint64, mbrTxn: gtxn.PaymentTxn) {
    proto 2 0
    // smart_contracts/burn_app/burner.algo.ts:19
    // assert(Txn.sender === this.manager_address.value, "Only the manager can bootstrap the application");
    txn Sender
    // smart_contracts/burn_app/burner.algo.ts:9
    // manager_address = GlobalState<Account>();
    intc_1 // 0
    bytec_1 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/burn_app/burner.algo.ts:19
    // assert(Txn.sender === this.manager_address.value, "Only the manager can bootstrap the application");
    ==
    assert // Only the manager can bootstrap the application
    // smart_contracts/burn_app/burner.algo.ts:20
    // assert(xnft_asset_id > 0, "Invalid xnft asset ID");
    frame_dig -2
    assert // Invalid xnft asset ID
    // smart_contracts/burn_app/burner.algo.ts:11
    // xnft_asset_id = GlobalState<uint64>();
    bytec_2 // "xnft_asset_id"
    // smart_contracts/burn_app/burner.algo.ts:21
    // this.xnft_asset_id.value = xnft_asset_id;
    frame_dig -2
    app_global_put
    // smart_contracts/burn_app/burner.algo.ts:10
    // total_burned = GlobalState<uint64>();
    bytec_0 // "total_burned"
    // smart_contracts/burn_app/burner.algo.ts:22
    // this.total_burned.value = 0;
    intc_1 // 0
    app_global_put
    // smart_contracts/burn_app/burner.algo.ts:23
    // this.opt_in_to_asset(xnft_asset_id, mbrTxn);
    frame_dig -2
    frame_dig -1
    callsub opt_in_to_asset
    retsub


// smart_contracts/burn_app/burner.algo.ts::BurnApp.withdraw_tokens(mbrTxn: uint64, amount: uint64, asset_id: uint64) -> void:
withdraw_tokens:
    // smart_contracts/burn_app/burner.algo.ts:26
    // withdraw_tokens(mbrTxn: gtxn.PaymentTxn, amount: uint64, asset_id: uint64) {
    proto 3 0
    // smart_contracts/burn_app/burner.algo.ts:27
    // assert(amount > 0, "Withdrawal amount must be greater than zero");
    frame_dig -2
    assert // Withdrawal amount must be greater than zero
    // smart_contracts/burn_app/burner.algo.ts:28
    // assert(Txn.sender === this.manager_address.value, "Only the manager can withdraw funds");
    txn Sender
    // smart_contracts/burn_app/burner.algo.ts:9
    // manager_address = GlobalState<Account>();
    intc_1 // 0
    bytec_1 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/burn_app/burner.algo.ts:28
    // assert(Txn.sender === this.manager_address.value, "Only the manager can withdraw funds");
    ==
    assert // Only the manager can withdraw funds
    // smart_contracts/burn_app/burner.algo.ts:29
    // assert(mbrTxn.amount >= WITHDRAW_FEE, "Insufficient fee for fund withdrawal");
    frame_dig -3
    gtxns Amount
    // smart_contracts/burn_app/burner.algo.ts:6
    // const WITHDRAW_FEE:uint64 = 1_000; // 0.1 ALGO in xnf
    intc_2 // 1000
    // smart_contracts/burn_app/burner.algo.ts:29
    // assert(mbrTxn.amount >= WITHDRAW_FEE, "Insufficient fee for fund withdrawal");
    >=
    assert // Insufficient fee for fund withdrawal
    // smart_contracts/burn_app/burner.algo.ts:30-37
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     assetAmount: amount,
    //     xferAsset: asset_id,
    //     fee: WITHDRAW_FEE,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/burn_app/burner.algo.ts:32
    // assetReceiver: Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // smart_contracts/burn_app/burner.algo.ts:30-36
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     assetAmount: amount,
    //     xferAsset: asset_id,
    //     fee: WITHDRAW_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/burn_app/burner.algo.ts:6
    // const WITHDRAW_FEE:uint64 = 1_000; // 0.1 ALGO in xnf
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/burn_app/burner.algo.ts:30-37
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     assetAmount: amount,
    //     xferAsset: asset_id,
    //     fee: WITHDRAW_FEE,
    //   })
    //   .submit();
    itxn_submit
    retsub


// smart_contracts/burn_app/burner.algo.ts::BurnApp.opt_in_to_asset(asset: uint64, mbrTxn: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/burn_app/burner.algo.ts:40
    // opt_in_to_asset(asset: uint64, mbrTxn: gtxn.PaymentTxn) {
    proto 2 0
    // smart_contracts/burn_app/burner.algo.ts:41
    // assert(mbrTxn.amount >= ASSET_FEE, "Insufficient fee for asset opt-in");
    frame_dig -1
    gtxns Amount
    // smart_contracts/burn_app/burner.algo.ts:3
    // const ASSET_FEE:uint64 = 101_000; // 0.101 ALGO in microAlgos
    pushint 101000 // 101000
    // smart_contracts/burn_app/burner.algo.ts:41
    // assert(mbrTxn.amount >= ASSET_FEE, "Insufficient fee for asset opt-in");
    >=
    assert // Insufficient fee for asset opt-in
    // smart_contracts/burn_app/burner.algo.ts:43-50
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 1_000,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/burn_app/burner.algo.ts:47
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // smart_contracts/burn_app/burner.algo.ts:46
    // assetAmount: 0,
    intc_1 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    // smart_contracts/burn_app/burner.algo.ts:43-49
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 1_000,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/burn_app/burner.algo.ts:48
    // fee: 1_000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/burn_app/burner.algo.ts:43-50
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     assetReceiver: Global.currentApplicationAddress,
    //     fee: 1_000,
    //   })
    //   .submit();
    itxn_submit
    retsub


// smart_contracts/burn_app/burner.algo.ts::BurnApp.burn_nft(asset: uint64, mbrTxn: uint64, axfer: uint64) -> void:
burn_nft:
    // smart_contracts/burn_app/burner.algo.ts:53
    // burn_nft(asset: Asset, mbrTxn: gtxn.PaymentTxn, axfer: gtxn.AssetTransferTxn) {
    proto 3 0
    // smart_contracts/burn_app/burner.algo.ts:54
    // assert(axfer.assetAmount === 1, "NFT must be burned with exactly 1 unit");
    frame_dig -1
    gtxns AssetAmount
    intc_0 // 1
    ==
    assert // NFT must be burned with exactly 1 unit
    // smart_contracts/burn_app/burner.algo.ts:55
    // assert(axfer.assetReceiver === Global.currentApplicationAddress, "NFT must be sent to the application address");
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // NFT must be sent to the application address
    // smart_contracts/burn_app/burner.algo.ts:56
    // assert(mbrTxn.amount >= BURN_FEE, "Insufficient fee for NFT burn");
    frame_dig -2
    gtxns Amount
    // smart_contracts/burn_app/burner.algo.ts:4
    // const BURN_FEE:uint64 = 1_000; // 0.002 ALGO in microAlgos
    intc_2 // 1000
    // smart_contracts/burn_app/burner.algo.ts:56
    // assert(mbrTxn.amount >= BURN_FEE, "Insufficient fee for NFT burn");
    >=
    assert // Insufficient fee for NFT burn
    // smart_contracts/burn_app/burner.algo.ts:57
    // assert(asset.balance(Global.currentApplicationAddress) >= BURN_PAYMENT, "Insufficient balance in xnft for burn payment");
    global CurrentApplicationAddress
    frame_dig -3
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/burn_app/burner.algo.ts:5
    // const BURN_PAYMENT:uint64 = 500_000; // 0.5 ALGO in xnft
    intc 4 // 500000
    // smart_contracts/burn_app/burner.algo.ts:57
    // assert(asset.balance(Global.currentApplicationAddress) >= BURN_PAYMENT, "Insufficient balance in xnft for burn payment");
    >=
    assert // Insufficient balance in xnft for burn payment
    // smart_contracts/burn_app/burner.algo.ts:59-66
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.xnft_asset_id.value,
    //     assetAmount: BURN_PAYMENT,
    //     assetReceiver: Txn.sender,
    //     fee: BURN_FEE,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/burn_app/burner.algo.ts:11
    // xnft_asset_id = GlobalState<uint64>();
    intc_1 // 0
    bytec_2 // "xnft_asset_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/burn_app/burner.algo.ts:63
    // assetReceiver: Txn.sender,
    txn Sender
    itxn_field AssetReceiver
    // smart_contracts/burn_app/burner.algo.ts:5
    // const BURN_PAYMENT:uint64 = 500_000; // 0.5 ALGO in xnft
    intc 4 // 500000
    itxn_field AssetAmount
    itxn_field XferAsset
    // smart_contracts/burn_app/burner.algo.ts:59-65
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.xnft_asset_id.value,
    //     assetAmount: BURN_PAYMENT,
    //     assetReceiver: Txn.sender,
    //     fee: BURN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/burn_app/burner.algo.ts:4
    // const BURN_FEE:uint64 = 1_000; // 0.002 ALGO in microAlgos
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/burn_app/burner.algo.ts:59-66
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.xnft_asset_id.value,
    //     assetAmount: BURN_PAYMENT,
    //     assetReceiver: Txn.sender,
    //     fee: BURN_FEE,
    //   })
    //   .submit();
    itxn_submit
    // smart_contracts/burn_app/burner.algo.ts:10
    // total_burned = GlobalState<uint64>();
    intc_1 // 0
    bytec_0 // "total_burned"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/burn_app/burner.algo.ts:68
    // this.total_burned.value = this.total_burned.value + 1;
    intc_0 // 1
    +
    // smart_contracts/burn_app/burner.algo.ts:10
    // total_burned = GlobalState<uint64>();
    bytec_0 // "total_burned"
    // smart_contracts/burn_app/burner.algo.ts:68
    // this.total_burned.value = this.total_burned.value + 1;
    swap
    app_global_put
    retsub
